% 绘制滤波后结果的速度
% clc;
close all;
h = figure();				    % 创建图形窗口
warning('off','MATLAB:HandleGraphics:ObsoletedProperty:JavaFrame');	    % 关闭相关的警告提示（因为调用了非公开接口）
jFrame = get(h,'JavaFrame');	% 获取底层 Java 结构相关句柄吧
pause(0.1);					    % 在 Win 10，Matlab 2017b 环境下不加停顿会报 Java 底层错误。各人根据需要可以进行实验验证
set(jFrame,'Maximized',1);	    %设置其最大化为真（0 为假）
pause(0.1);					    % 个人实践中发现如果不停顿，窗口可能来不及变化，所获取的窗口大小还是原来的尺寸。各人根据需要可以进行实验验证
warning('on','MATLAB:HandleGraphics:ObsoletedProperty:JavaFrame');		% 打开相关警告设置
tile=tiledlayout(2, 4,'TileSpacing','tight','Padding','tight');

nexttile(1)
hold on;
scatter(posiRes(:, 1), posiRes(:, 2), 'blue');
% scatter(KF.static_mea_arr(:, 1), KF.static_mea_arr(:, 2), 'yellow');
scatter(kal_posiRes(:, 1), kal_posiRes(:, 2), 'r');

title('滤波后结果');
hold off;


nexttile(2);
hold on;
plot(kalmanDataArr(:, 1:4));
plot(KF.real_time_data_resSet(:, 1));
plot(KF.real_time_data_resSet(:, 2));
plot(KF.real_time_data_resSet(:, 3));
title("X");
legend('Measured', 'estimateRes', 'kalmanRes', 'kalmanGain', 'posiVar', 'velocity', 'velVar');
hold off;


nexttile(3);
scatter3(posiRes(:,1),posiRes(:,2), 1:length(posiRes), [], linspace(1, 256, length(posiRes)), 'filled');

nexttile(4);
hold on;
plot(KF.real_time_data_resSet(:, 7));
plot(ones(length(KF.real_time_data_resSet), 1) * 0.5);
title('速度');
hold off;

nexttile(5);
hold on;
plot(KF.static_step_set)
hold off;



nexttile(6);
hold on;
plot(kalmanDataArr(:, 6:9));
plot(KF.real_time_data_resSet(:, 4));
plot(KF.real_time_data_resSet(:, 5));
plot(KF.real_time_data_resSet(:, 6));
title("Y");
legend('Measured', 'estimateRes', 'kalmanRes', 'kalmanGain', 'posiVar', 'velocity', 'velVar');
hold off;

nexttile(7);
scatter3(kal_posiRes(:,1), kal_posiRes(:,2), 1:length(kal_posiRes), [], linspace(1, 256, length(kal_posiRes)), 'filled');

return
%%

figu
x = [1, 2, nan, 4, 5];
plot(x);


